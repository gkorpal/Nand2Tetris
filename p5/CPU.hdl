// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=IM);
    
    // choose between A-instruction and C-instruction behavior
    Not(in=instruction[15], out=notOP);
    Or(a=notOP, b=instruction[5], out=loadA);    
    ARegister(in=IM, load=loadA, out=A, out[0..14]=addressM);
    
    // working with C-instruction
    And(a=instruction[15], b=instruction[12], out=selALUM);
    Mux16(a=A, b=inM, sel=selALUM, out=ALUM);
    
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=ALUout, load=loadD, out=D);
    
    ALU(x=D, y=ALUM, 
    zx=instruction[11], 
    nx=instruction[10], 
    zy=instruction[9], 
    ny=instruction[8], 
    f=instruction[7], 
    no=instruction[6], 
    out=outM, out=ALUout, zr=zero, ng=negative);
    
    And(a=instruction[15], b=instruction[3], out=writeM);
    
    And(a=instruction[15], b=instruction[2], out=jump1);
    And(a=jump1, b=negative, out=JLT);
    And(a=instruction[15], b=instruction[1], out=jump2);
    And(a=jump2, b=zero, out=JEQ);
    And(a=instruction[15], b=instruction[0], out=jump3);
    Not(in=negative, out=nonnegative);
    Not(in=zero, out=nonzero);
    And(a=nonnegative, b=nonzero, out=positive); 
    And(a=jump3, b=positive, out=JGT);
    Or(a=JLT, b=JEQ, out=jump4);
    Or(a=jump4, b=JGT, out=jump);
    PC(in=A, load=jump, inc=true, reset=reset, out[0..14]=pc);
    // I followed Figure 4.5 and 5.8
    // A-instruction (always load in ARegister)
    // 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
    //  0  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x
    // eg: @3001 = 0000101110111001
    // C-instruction (load in ARegister if d1=1)
    // 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
    //  1  -  - a1 c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3 
    // here we set inc=true since PC++ is the default operation
    // load decides jump condition for PC
    // we did Or3Way to find jump
}
