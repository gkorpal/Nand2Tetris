// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:
    Inc16(in=out0, out=out0inc);
    Mux16(a=out0, b=out0inc, sel=inc, out=out0inc1);
    Mux16(a=out0inc1, b=in, sel=load, out=out0inc1in);
    Mux16(a=out0inc1in, b=false, sel=reset, out=out0inc1in0);    
    Register(in=out0inc1in0, load=true, out=out0, out=out);

    // Here Register = DFF16; see Figure 3.4
    // Fork the if statements: out(t)->out(t)+1->in(t)->0
    // out(t),out(t)+1->Mux16(sel=inc)-> ,in(t)->Mux16(sel=load)-> ,0->
    // Mux16(sel=reset)->Register->out(t+1) (also feedback loop)
    // As in Bit, put the combinational gates before the sequential gate
    // Here we will use Register to create a feedback loop, to prevent
    // the combinational gate like Inc16 to evaluate in the middle of cycle
    // For example, PC(0)=PC(0+)!=PC(1)
    
    /* failed logic
    * Register(in=in, load=load, out=o1, out=o2);
    * Inc16(in=o2, out=o3);
    * Mux4Way16(a=o1, b=false, c=o3, d=false, sel[1]=inc, sel[0]=reset,out=out);
    */


}
